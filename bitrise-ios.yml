# This configuration contains the following workflows:
#
# - `unit-test` runs the test plan UnitTests on a simulator.
# - `ui-test` runs the test plan UITests on a simulator.
# - `deploy-to-app-store` creates a release build and submits it to App Store Connect.
#
# In order to use it on Bitrise, you should do the following:
# 
# 1. In your Bitrise profile/organisation settings, create an 'Apple Service connection' using an App Store Connect API key (.p8 file).
# 2. In your Bitrise project settings, under 'team', select the Apple service connection you just created.
# 3. In the Bitrise project, under code signing assets, upload a code signing certificate (.p12 file). 
#    I always export both the 'Apple Development' and 'Apple Distribution' certificates using Keychain Access on my Mac.
# 4. Paste this yaml into Bitrise. Fill in the environment variables using the 'env vars' in the Bitrise workflow editor.
---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
meta:
  bitrise.io:
    stack: osx-xcode-13.1.x
app:
  envs:
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: AwesomeProject.xcodeproj
  - opts:
      is_expand: false
    BITRISE_SCHEME: AwesomeProject
  - opts:
      is_expand: false
    BITRISE_DISTRIBUTION_METHOD: app-store
  - opts:
      is_expand: false
    BITRISE_APPLE_APP_ID: '0000000000'
trigger_map:
- push_branch: release/*
  workflow: deploy-to-app-store
- push_branch: "*"
  workflow: unit-test
- pull_request_source_branch: "*"
  workflow: unit-test
workflows:
  deploy-to-app-store:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - certificate-and-profile-installer@1: {}
    - ios-auto-provision-appstoreconnect@2:
        inputs:
        - distribution_type: "$BITRISE_DISTRIBUTION_METHOD"
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Behapp/Info.plist
    - xcode-test@4:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - test_plan: UnitTests
        - destination: platform=iOS Simulator,name=iPhone 13,OS=latest
        - scheme: "$BITRISE_SCHEME"
    - xcode-archive@4:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - scheme: "$BITRISE_SCHEME"
        - distribution_method: "$BITRISE_DISTRIBUTION_METHOD"
    - deploy-to-itunesconnect-deliver@2:
        inputs:
        - app_id: "$BITRISE_APPLE_APP_ID"
    - deploy-to-bitrise-io@2: {}
    - cache-push@2: {}
  ui-test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - certificate-and-profile-installer@1: {}
    - ios-auto-provision-appstoreconnect@2:
        inputs:
        - distribution_type: "$BITRISE_DISTRIBUTION_METHOD"
    - xcode-test@4:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - destination: platform=iOS Simulator,name=iPhone 13,OS=latest
        - test_plan: UITests
        - scheme: "$BITRISE_SCHEME"
    - deploy-to-bitrise-io@2: {}
    - cache-push@2: {}
  unit-test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - certificate-and-profile-installer@1: {}
    - ios-auto-provision-appstoreconnect@2:
        inputs:
        - distribution_type: "$BITRISE_DISTRIBUTION_METHOD"
    - xcode-test@4:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - destination: platform=iOS Simulator,name=iPhone 13,OS=latest
        - test_plan: UnitTests
        - scheme: "$BITRISE_SCHEME"
    - deploy-to-bitrise-io@2: {}
    - cache-push@2: {}
